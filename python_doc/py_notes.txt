# To import a package 
	import numpy as np;
	import math;

# To import specific method/function from package
	from numpy import array
# This is can be used as:
	randomNum = array(1,2,4,6); # creates an array/list


# to get length of an array or string:
	len();

# to use the 'to the power of'
	pwr_of_2 = 2 ** 2;
	pwr_of_3 = 2 ** 3;
	print("power of 2:", pwr_of_2);
	print("power of 3:", pwr_of_3);


# lists/array
 arr = [1,3,6,7,89,76];
	
 print(arr[:3]) # gets 1,3 and 6 - doesn't get the 3rd index 
 print(arr[4:]) # gets 89 and 76 - doesn't get the 3rd index 
 print(arr.index(89)) # returns 4


# numpy array can only work with single array
# types - i.e. only boolean, string, float etc.

# you can use np.std (standard deviation), np.mean, np.median(), np.coercof


# matplotlib.pyplot (another import)
# you can do scatter plots, line graphs, histograms

import matplotlib.pyplot as mpl

mpl.scatter(x,y) #makes a scatter graph
mpl.show() #to show the scatter graph


mpl.plot(x,y) #makes a line graph
mpl.show() #shows the line graph


mpl.hist(x, numOfBins) #makes a histogram graph
mpl.show() #shows the histogram


####################################################################################################
####################################################################################################
LISTS
####################################################################################################


integer_list = [1, 2, 3]
heterogeneous_list = ["string", 0.1, True]
list_of_lists = [ integer_list, heterogeneous_list, [] ]

list_length = len(integer_list)     # equals 3
list_sum    = sum(integer_list)     # equals 6

#You can get or set the nth element of a list with square brackets:
x = range(10)   # is the list [0, 1, ..., 9]
zero = x[0]     # equals 0, lists are 0-indexed
one = x[1]      # equals 1
nine = x[-1]    # equals 9, 'Pythonic' for last element
eight = x[-2]   # equals 8, 'Pythonic' for next-to-last element
x[0] = -1       # now x is [-1, 1, 2, 3, ..., 9]

#You can also use square brackets to “slice” lists:
first_three   = x[:3]               # [-1, 1, 2]
three_to_end = x[3:]                # [3, 4, ..., 9]
one_to_four = x[1:5]                # [1, 2, 3, 4]
last_three = x[-3:]                 # [7, 8, 9]
without_first_and_last = x[1:-1]    # [1, 2, ..., 8]
copy_of_x = x[:]                    # [-1, 1, 2, ..., 9]

#Python has an 'in' operator to check for list membership - this checks every element (can be slow):
1 in [1, 2, 3]    # True
0 in [1, 2, 3]    # False

#It is easy to concatenate lists together:
x = [1, 2, 3]
x.extend([4, 5, 6])     # x is now [1,2,3,4,5,6]

#If you don’t want to modify x you can use list addition:
x = [1, 2, 3]
y = x + [4, 5, 6]       # y is [1, 2, 3, 4, 5, 6]; x is unchanged

#More frequently we will append to lists one item at a time:
x = [1, 2, 3]

x.append(0)      # x is now [1, 2, 3, 0]
y = x[-1]        # equals 0
z = len(x)       # equals 4

#It is often convenient to unpack lists if you know how many elements they contain:
x, y = [1, 2]    # now x is 1, y is 2

####################################################################################################
Error Handling
####################################################################################################
#When something goes wrong, Python raises an exception. 
#Unhandled, these will cause your program to crash. 
#You can handle them using try and except:

try:
    print 0 / 0
except ZeroDivisionError:
    print "cannot divide by zero"



####################################################################################################
TUPLES
####################################################################################################
#Tuples are immutable lists. 
#Pretty much anything you can do to a list that doesn’t involve modifying it, you can do to a tuple. 
#You specify a tuple by using parentheses (or nothing) instead of square brackets:

my_list = [1, 2]
my_tuple = (1, 2)
other_tuple = 3, 4
my_list[1] = 3      # my_list is now [1, 3]

try:
    my_tuple[1] = 3
except TypeError:
    print "cannot modify a tuple"


#Tuples are a convenient way to return multiple values from functions:

def sum_and_product(x, y):
    return (x + y),(x * y)

sp = sum_and_product(2, 3)    # equals (5, 6)
s, p = sum_and_product(5, 10) # s is 15, p is 50

#Tuples (and lists) can also be used for multiple assignment:
x, y = 1, 2     # now x is 1, y is 2
x, y = y, x     # Pythonic way to swap variables; now x is 2, y is 1



####################################################################################################
DICTIONARIES
####################################################################################################

empty_dict = {}                         # Pythonic
empty_dict2 = dict()                    # less Pythonic
grades = { "Joel" : 80, "Tim" : 95 }    # dictionary literal

#You can look up the value for a key using square brackets:

joels_grade = grades["Joel"]            # equals 80

#But you’ll get a KeyError if you ask for a key that’s not in the dictionary:

try:
    kates_grade = grades["Kate"]
except KeyError:
    print "no grade for Kate!"

#You can check for the existence of a key using in:

joel_has_grade = "Joel" in grades     # True
kate_has_grade = "Kate" in grades     # False

#Dictionaries have a get method that returns a default value (instead of raising an exception) 
#when you look up a key that’s not in the dictionary:

joels_grade = grades.get("Joel", 0)   # equals 80
kates_grade = grades.get("Kate", 0)   # equals 0
no_ones_grade = grades.get("No One")  # default default is None

#You assign key-value pairs using the same square brackets:

grades["Tim"] = 99                    # replaces the old value
grades["Kate"] = 100                  # adds a third entry
num_students = len(grades)            # equals 3

#We will frequently use dictionaries as a simple way to represent structured data:

tweet = {
    "user" : "joelgrus",
    "text" : "Data Science is Awesome",
    "retweet_count" : 100,
    "hashtags" : ["#data", "#science", "#datascience", "#awesome", "#yolo"]
}

#Besides looking for specific keys we can look at all of them:

tweet_keys   = tweet.keys()     # list of keys
tweet_values = tweet.values()   # list of values
tweet_items  = tweet.items()    # list of (key, value) tuples

"user" in tweet_keys            # True, but uses a slow list in
"user" in tweet                 # more Pythonic, uses faster dict in
"joelgrus" in tweet_values      # True

#Dictionary keys must be immutable; in particular, you cannot use lists as keys. 
#If you need a multipart key, you should use a tuple or figure out a way to turn the key into a string.
defaultdict

#Imagine that you’re trying to count the words in a document.
#An obvious approach is to create a dictionary in which the keys are words and the values are counts.
#As you check each word, you can increment its count if it’s already in the dictionary and add it to the dictionary if it’s not:

word_counts = {}
for word in document:
    if word in word_counts:
        word_counts[word] += 1
    else:
        word_counts[word] = 1

#You could also use the “forgiveness is better than permission” approach 
#and just handle the exception from trying to look up a missing key:

word_counts = {}
for word in document:
    try:
        word_counts[word] += 1
    except KeyError:
        word_counts[word] = 1

#A third approach is to use get, which behaves gracefully for missing keys:

word_counts = {}
for word in document:
    previous_count = word_counts.get(word, 0)
    word_counts[word] = previous_count + 1

#defaultdict is like a regular dictionary, except that when you try to look up a key it doesn’t contain, 
#it first adds a value for it using a zero-argument function you provided when you created it. 
#In order to use defaultdicts, you have to import them from collections:

from collections import defaultdict

word_counts = defaultdict(int)          # int() produces 0
for word in document:
    word_counts[word] += 1

#They can also be useful with list or dict or even your own functions:

dd_list = defaultdict(list)             # list() produces an empty list
dd_list[2].append(1)                    # now dd_list contains {2: [1]}

dd_dict = defaultdict(dict)             # dict() produces an empty dict
dd_dict["Joel"]["City"] = "Seattle"     # { "Joel" : { "City" : Seattle"}}

dd_pair = defaultdict(lambda: [0, 0])
dd_pair[2][1] = 1                       # now dd_pair contains {2: [0,1]}

#These will be useful when we’re using dictionaries to “collect” results by some key 
#and don’t want to have to check every time to see if the key exists yet.

Counter

#A Counter turns a sequence of values into a defaultdict(int)-like object mapping keys to counts. 
#We will primarily use it to create histograms:

from collections import Counter
c = Counter([0, 1, 2, 0])          # c is (basically) { 0 : 2, 1 : 1, 2 : 1 }

#This gives us a very simple way to solve our word_counts problem:

word_counts = Counter(document)

#A Counter instance has a most_common method that is frequently useful:
# print the 10 most common words and their counts

for word, count in word_counts.most_common(10):
    print word, count

####################################################################################################
SETS
####################################################################################################

#set, which represents a collection of distinct elements:

s = set()
s.add(1)       # s is now { 1 }
s.add(2)       # s is now { 1, 2 }
s.add(2)       # s is still { 1, 2 }
x = len(s)     # equals 2
y = 2 in s     # equals True
z = 3 in s     # equals False

#'in' is a very fast operation on sets. 
#If we have a large collection of items that we want to use for a membership test, 
#a set is more appropriate than a list:

stopwords_list = ["a","an","at"] + hundreds_of_other_words + ["yet", "you"]

"zip" in stopwords_list     # False, but have to check every element

stopwords_set = set(stopwords_list)
"zip" in stopwords_set      # very fast to check

#The second reason is to find the distinct items in a collection:

item_list = [1, 2, 3, 1, 2, 3]
num_items = len(item_list)                # 6
item_set = set(item_list)                 # {1, 2, 3}
num_distinct_items = len(item_set)        # 3
distinct_item_list = list(item_set)       # [1, 2, 3]

####################################################################################################
CONTROL FLOW AND TRUTHINESS
####################################################################################################

if 1 > 2:
    message = "if only 1 were greater than two..."
elif 1 > 3:
    message = "elif stands for 'else if'"
else:
    message = "when all else fails use else (if you want to)"

#You can also write a ternary if-then-else on one line, which we will do occasionally:

parity = "even" if x % 2 == 0 else "odd"

#Python has a while loop:

x = 0
while x < 10:
    print x, "is less than 10"
    x += 1

#although more often we’ll use for and in:

for x in range(10):
    print x, "is less than 10"

#If you need more-complex logic, you can use continue and break:

for x in range(10):
    if x == 3:
        continue  # go immediately to the next iteration
    if x == 5:
        break     # quit the loop entirely
    print x

#Python has an 'all' function, which takes a list and returns True precisely when every element is truthy,
#and an 'any' function, which returns True when at least one element is truthy:

all([True, 1, { 3 }])   # True
all([True, 1, {}])      # False, {} is falsy
any([True, 1, {}])      # True, True is truthy
all([])                 # True, no falsy elements in the list
any([])                 # False, no truthy elements in the list


####################################################################################################
SORTING AND LIST COMPREHENSIONS
####################################################################################################

#Every Python list has a sort method that sorts it in place. 
#If you don’t want to mess up your list, you can use the sorted function, which returns a new list:

x = [4,1,2,3]
y = sorted(x)     # is [1,2,3,4], x is unchanged
x.sort()          # now x is [1,2,3,4]

#By default, sort (and sorted) sort a list from smallest to largest based on naively comparing the elements to one another.
#If you want elements sorted from largest to smallest, you can specify a reverse=True parameter. 
#And instead of comparing the elements themselves, you can compare the results of a function that you specify with key:

# sort the list by absolute value from largest to smallest
x = sorted([-4,1,-2,3], key=abs, reverse=True)  # is [-4,3,-2,1]

# sort the words and counts from highest count to lowest
wc = sorted(word_counts.items(),
            key=lambda (word, count): count,
            reverse=True)


#List Comprehensions
# You can transform a list into another list, by choosing only certain elements, or by transforming elements, or both.
#The Pythonic way of doing this is list comprehensions:

even_numbers = [x for x in range(5) if x % 2 == 0]  # [0, 2, 4]
squares      = [x * x for x in range(5)]            # [0, 1, 4, 9, 16]
even_squares = [x * x for x in even_numbers]        # [0, 4, 16]

#You can similarly turn lists into dictionaries or sets:

square_dict = { x : x * x for x in range(5) }  # { 0:0, 1:1, 2:4, 3:9, 4:16 }
square_set  = { x * x for x in [1, -1] }       # { 1 }

#If you don’t need the value from the list, it’s conventional to use an underscore as the variable:

zeroes = [0 for _ in even_numbers]      # has the same length as even_numbers

#A list comprehension can include multiple fors:

pairs = [(x, y)
         for x in range(10)
         for y in range(10)]   # 100 pairs (0,0) (0,1) ... (9,8), (9,9)

#and later fors can use the results of earlier ones:

increasing_pairs = [(x, y)                       # only pairs with x < y,
                    for x in range(10)           # range(lo, hi) equals
                    for y in range(x + 1, 10)]   # [lo, lo + 1, ..., hi - 1]


####################################################################################################
GENERATORS, ITERATORS AND RANDOMNESS
####################################################################################################

#A generator is something that you can iterate over (for us, usually using for) but whose values are produced only as needed (lazily).

#One way to create generators is with functions and the yield operator:

def lazy_range(n):
    """a lazy version of range"""
    i = 0
    while i < n:
        yield i
        i += 1

#The following loop will consume the yielded values one at a time until none are left:

for i in lazy_range(10):
    do_something_with(i)

#(Python actually comes with a lazy_range function called xrange, and in Python 3, range itself is lazy.) 
#This means you could even create an infinite sequence:

def natural_numbers():
    """returns 1, 2, 3, ..."""
    n = 1
    while True:
        yield n
        n += 1

#A second way to create generators is by using for comprehensions wrapped in parentheses:

lazy_evens_below_20 = (i for i in lazy_range(20) if i % 2 == 0)

#Recall also that every dict has an items() method that returns a list of its key-value pairs. 
#More frequently we’ll use the iteritems() method, which lazily yields the key-value pairs one at a time as we iterate over it.

#####Randomness#####
#To generate random numbers - you can import random

import random

four_uniform_randoms = [random.random() for _ in range(4)]

#  [0.8444218515250481,      # random.random() produces numbers
#   0.7579544029403025,      # uniformly between 0 and 1
#   0.420571580830845,       # it's the random function we'll use
#   0.25891675029296335]     # most often

#The random module actually produces pseudorandom (that is, deterministic) numbers 
based on an internal state that you can set with random.seed if you want to get reproducible results:

random.seed(10)         # set the seed to 10
print random.random()   # 0.57140259469
random.seed(10)         # reset the seed to 10
print random.random()   # 0.57140259469 again

#We’ll sometimes use random.randrange, which takes either 1 or 2 arguments and 
#returns an element chosen randomly from the corresponding range():

random.randrange(10)    # choose randomly from range(10) = [0, 1, ..., 9]
random.randrange(3, 6)  # choose randomly from range(3, 6) = [3, 4, 5]

#There are a few more methods that we’ll sometimes find convenient. 
#random.shuffle randomly reorders the elements of a list:

up_to_ten = range(10)
random.shuffle(up_to_ten)
print up_to_ten
# [2, 5, 1, 9, 7, 3, 8, 6, 4, 0]   (your results will probably be different)

#If you need to randomly pick one element from a list you can use random.choice:

my_best_friend = random.choice(["Alice", "Bob", "Charlie"])     # "Bob" for me

#And if you need to randomly choose a sample of elements without replacement 
#(i.e., with no duplicates), you can use random.sample:

lottery_numbers = range(60)
winning_numbers = random.sample(lottery_numbers, 6)  # [16, 36, 10, 6, 25, 9]

#To choose a sample of elements with replacement 
#(i.e., allowing duplicates), you can just make multiple calls to random.choice:

four_with_replacement = [random.choice(range(10))
                         for _ in range(4)]
# [9, 4, 4, 2]


####################################################################################################
REGEX AND OOP
####################################################################################################
#To use regex

import re

print all([                                # all of these are true, because
    not re.match("a", "cat"),              # * 'cat' doesn't start with 'a'
    re.search("a", "cat"),                 # * 'cat' has an 'a' in it
    not re.search("c", "dog"),             # * 'dog' doesn't have a 'c' in it
    3 == len(re.split("[ab]", "carbs")),   # * split on a or b to ['c','r','s']
    "R-D-" == re.sub("[0-9]", "-", "R2D2") # * replace digits with dashes
    ])  # prints True


#####OOP#####

# by convention, we give classes PascalCase names

class Set:

    # these are the member functions
    # every one takes a first parameter "self" (another convention)
    # that refers to the particular Set object being used

    def __init__(self, values=None):
        """This is the constructor.
        It gets called when you create a new Set.
        You would use it like
        s1 = Set()          # empty set
        s2 = Set([1,2,2,3]) # initialize with values"""

        self.dict = {} # each instance of Set has its own dict property
                       # which is what we'll use to track memberships
        if values is not None:
            for value in values:
                self.add(value)

    def __repr__(self):
        """this is the string representation of a Set object
        if you type it at the Python prompt or pass it to str()"""
        return "Set: " + str(self.dict.keys())

    # we'll represent membership by being a key in self.dict with value True
    def add(self, value):
        self.dict[value] = True

    # value is in the Set if it's a key in the dictionary
    def contains(self, value):
        return value in self.dict

    def remove(self, value):
        del self.dict[value]

#Which we could then use like:

s = Set([1,2,3])
s.add(4)
print s.contains(4)     # True
s.remove(3)
print s.contains(3)     # False


####################################################################################################
FUNTIONAL TOOLS (MAP, FILTER, REDUCE) AND ENUMERATE
####################################################################################################
#When passing functions around, sometimes we’ll want to partially apply (or curry) functions to create new functions. 
#As a simple example, imagine that we have a function of two variables:

def exp(base, power):
    return base ** power

#and we want to use it to create a function of one variable two_to_the whose input is a power 
#and whose output is the result of exp(2, power).
#We can, of course, do this with def, but this can sometimes get unwieldy:

def two_to_the(power):
    return exp(2, power)

#A different approach is to use functools.partial:

from functools import partial

two_to_the = partial(exp, 2)     # is now a function of one variable
print two_to_the(3)              # 8

#You can also use partial to fill in later arguments if you specify their names:

square_of = partial(exp, power=2)
print square_of(3)                  # 9

#It starts to get messy if you curry arguments in the middle of the function.
#We occasionally use map, reduce, and filter, which provide functional alternatives to list comprehensions:

def double(x):
    return 2 * x

xs = [1, 2, 3, 4]
twice_xs = [double(x) for x in xs]        # [2, 4, 6, 8]
twice_xs = map(double, xs)                # same as above
list_doubler = partial(map, double)       # *function* that doubles a list
twice_xs = list_doubler(xs)               # again [2, 4, 6, 8]

#You can use map with multiple-argument functions if you provide multiple lists:

def multiply(x, y): return x * y

products = map(multiply, [1, 2], [4, 5]) # [1 * 4, 2 * 5] = [4, 10]

#Similarly, filter does the work of a list-comprehension if:

def is_even(x):
    """True if x is even, False if x is odd"""
    return x % 2 == 0

x_evens = [x for x in xs if is_even(x)]    # [2, 4]
x_evens = filter(is_even, xs)              # same as above
list_evener = partial(filter, is_even)     # *function* that filters a list
x_evens = list_evener(xs)                  # again [2, 4]

#And reduce combines the first two elements of a list, then that result with the third, 
#that result with the fourth, and so on, producing a single result:

x_product = reduce(multiply, xs)           # = 1 * 2 * 3 * 4 = 24
list_product = partial(reduce, multiply)   # *function* that reduces a list
x_product = list_product(xs)               # again = 24


#####ENUMERATE#####
#If you’ll want to iterate over a list and use both its elements and their indexes:

# not Pythonic
for i in range(len(documents)):
    document = documents[i]
    do_something(i, document)

# also not Pythonic
i = 0
for document in documents:
    do_something(i, document)
    i += 1

#The Pythonic solution is enumerate, which produces tuples (index, element):

for i, document in enumerate(documents):
    do_something(i, document)

Similarly, if we just want the indexes:

for i in range(len(documents)): do_something(i)     # not Pythonic
for i, _ in enumerate(documents): do_something(i)   # Pythonic

####################################################################################################
ZIP AND ARGUMENT UNPACKING AND ARGS & KWARGS
####################################################################################################
#Often we will need to zip two or more lists together. 
#zip transforms multiple lists into a single list of tuples of corresponding elements:

list1 = ['a', 'b', 'c']
list2 = [1, 2, 3]
zip(list1, list2)        # is [('a', 1), ('b', 2), ('c', 3)]

#If the lists are different lengths, zip stops as soon as the first list ends.
#You can also “unzip” a list using a strange trick:

pairs = [('a', 1), ('b', 2), ('c', 3)]
letters, numbers = zip(*pairs)

#The asterisk performs argument unpacking, which uses the elements of pairs as individual arguments to zip.
#It ends up the same as if you’d called:

zip(('a', 1), ('b', 2), ('c', 3))

#which returns [('a','b','c'), ('1','2','3')].

#You can use argument unpacking with any function:

def add(a, b): return a + b

add(1, 2)      # returns 3
add([1, 2])    # TypeError!
add(*[1, 2])   # returns 3

#####ARGS & KWARGS#####

#Let’s say we want to create a higher-order function that takes as input some function f 
#and returns a new function that for any input returns twice the value of f:

def doubler(f):
    def g(x):
        return 2 * f(x)
    return g

#This works in some cases:

def f1(x):
    return x + 1

high_order = doubler(f1)
print high_order(3)          # 8 (== ( 3 + 1) * 2)
print high_order(-1)         # 0 (== (-1 + 1) * 2)

#However, it breaks down with functions that take more than a single argument:

def f2(x, y):
    return x + y

high_order = doubler(f2)
print g(1, 2)    # TypeError: g() takes exactly 1 argument (2 given)

#What we need is a way to specify a function that takes arbitrary arguments.
#We can do this with argument unpacking and a little bit of magic:

def magic(*args, **kwargs):
    print "unnamed args:", args
    print "keyword args:", kwargs

magic(1, 2, key="word", key2="word2")

# prints
#  unnamed args: (1, 2)
#  keyword args: {'key2': 'word2', 'key': 'word'}

#That is, when we define a function like this, args is a tuple of its unnamed arguments 
#and kwargs is a dict of its named arguments. It works the other way too, 
#if you want to use a list (or tuple) and dict to supply arguments to a function:

def other_way_magic(x, y, z):
    return x + y + z

x_y_list = [1, 2]
z_dict = { "z" : 3 }
print other_way_magic(*x_y_list, **z_dict)   # 6

#You could do all sorts of strange tricks with this; 
#we will only use it to produce higher-order functions whose inputs can accept arbitrary arguments:

def doubler_correct(f):
    """works no matter what kind of inputs f expects"""
    def g(*args, **kwargs):
        """whatever arguments g is supplied, pass them through to f"""
        return 2 * f(*args, **kwargs)
    return g

high_order = doubler_correct(f2)
print high_order(1, 2) # 6

